// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Accounts", testAccounts)
	t.Run("Identifiers", testIdentifiers)
	t.Run("Identities", testIdentities)
}

func TestDelete(t *testing.T) {
	t.Run("Accounts", testAccountsDelete)
	t.Run("Identifiers", testIdentifiersDelete)
	t.Run("Identities", testIdentitiesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("Identifiers", testIdentifiersQueryDeleteAll)
	t.Run("Identities", testIdentitiesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("Identifiers", testIdentifiersSliceDeleteAll)
	t.Run("Identities", testIdentitiesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Accounts", testAccountsExists)
	t.Run("Identifiers", testIdentifiersExists)
	t.Run("Identities", testIdentitiesExists)
}

func TestFind(t *testing.T) {
	t.Run("Accounts", testAccountsFind)
	t.Run("Identifiers", testIdentifiersFind)
	t.Run("Identities", testIdentitiesFind)
}

func TestBind(t *testing.T) {
	t.Run("Accounts", testAccountsBind)
	t.Run("Identifiers", testIdentifiersBind)
	t.Run("Identities", testIdentitiesBind)
}

func TestOne(t *testing.T) {
	t.Run("Accounts", testAccountsOne)
	t.Run("Identifiers", testIdentifiersOne)
	t.Run("Identities", testIdentitiesOne)
}

func TestAll(t *testing.T) {
	t.Run("Accounts", testAccountsAll)
	t.Run("Identifiers", testIdentifiersAll)
	t.Run("Identities", testIdentitiesAll)
}

func TestCount(t *testing.T) {
	t.Run("Accounts", testAccountsCount)
	t.Run("Identifiers", testIdentifiersCount)
	t.Run("Identities", testIdentitiesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Accounts", testAccountsHooks)
	t.Run("Identifiers", testIdentifiersHooks)
	t.Run("Identities", testIdentitiesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("Identifiers", testIdentifiersInsert)
	t.Run("Identifiers", testIdentifiersInsertWhitelist)
	t.Run("Identities", testIdentitiesInsert)
	t.Run("Identities", testIdentitiesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("IdentityToAccountUsingAccount", testIdentityToOneAccountUsingAccount)
	t.Run("IdentityToIdentifierUsingIdentifier", testIdentityToOneIdentifierUsingIdentifier)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AccountToIdentities", testAccountToManyIdentities)
	t.Run("IdentifierToIdentities", testIdentifierToManyIdentities)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("IdentityToAccountUsingIdentities", testIdentityToOneSetOpAccountUsingAccount)
	t.Run("IdentityToIdentifierUsingIdentities", testIdentityToOneSetOpIdentifierUsingIdentifier)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AccountToIdentities", testAccountToManyAddOpIdentities)
	t.Run("IdentifierToIdentities", testIdentifierToManyAddOpIdentities)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Accounts", testAccountsReload)
	t.Run("Identifiers", testIdentifiersReload)
	t.Run("Identities", testIdentitiesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("Identifiers", testIdentifiersReloadAll)
	t.Run("Identities", testIdentitiesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Accounts", testAccountsSelect)
	t.Run("Identifiers", testIdentifiersSelect)
	t.Run("Identities", testIdentitiesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Accounts", testAccountsUpdate)
	t.Run("Identifiers", testIdentifiersUpdate)
	t.Run("Identities", testIdentitiesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("Identifiers", testIdentifiersSliceUpdateAll)
	t.Run("Identities", testIdentitiesSliceUpdateAll)
}
