// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIdentifiers(t *testing.T) {
	t.Parallel()

	query := Identifiers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIdentifiersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIdentifiersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Identifiers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIdentifiersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IdentifierSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIdentifiersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IdentifierExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Identifier exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IdentifierExists to return true, but got false.")
	}
}

func testIdentifiersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	identifierFound, err := FindIdentifier(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if identifierFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIdentifiersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Identifiers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIdentifiersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Identifiers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIdentifiersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	identifierOne := &Identifier{}
	identifierTwo := &Identifier{}
	if err = randomize.Struct(seed, identifierOne, identifierDBTypes, false, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}
	if err = randomize.Struct(seed, identifierTwo, identifierDBTypes, false, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = identifierOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = identifierTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Identifiers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIdentifiersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	identifierOne := &Identifier{}
	identifierTwo := &Identifier{}
	if err = randomize.Struct(seed, identifierOne, identifierDBTypes, false, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}
	if err = randomize.Struct(seed, identifierTwo, identifierDBTypes, false, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = identifierOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = identifierTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func identifierBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func identifierAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Identifier) error {
	*o = Identifier{}
	return nil
}

func testIdentifiersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Identifier{}
	o := &Identifier{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, identifierDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Identifier object: %s", err)
	}

	AddIdentifierHook(boil.BeforeInsertHook, identifierBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	identifierBeforeInsertHooks = []IdentifierHook{}

	AddIdentifierHook(boil.AfterInsertHook, identifierAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	identifierAfterInsertHooks = []IdentifierHook{}

	AddIdentifierHook(boil.AfterSelectHook, identifierAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	identifierAfterSelectHooks = []IdentifierHook{}

	AddIdentifierHook(boil.BeforeUpdateHook, identifierBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	identifierBeforeUpdateHooks = []IdentifierHook{}

	AddIdentifierHook(boil.AfterUpdateHook, identifierAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	identifierAfterUpdateHooks = []IdentifierHook{}

	AddIdentifierHook(boil.BeforeDeleteHook, identifierBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	identifierBeforeDeleteHooks = []IdentifierHook{}

	AddIdentifierHook(boil.AfterDeleteHook, identifierAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	identifierAfterDeleteHooks = []IdentifierHook{}

	AddIdentifierHook(boil.BeforeUpsertHook, identifierBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	identifierBeforeUpsertHooks = []IdentifierHook{}

	AddIdentifierHook(boil.AfterUpsertHook, identifierAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	identifierAfterUpsertHooks = []IdentifierHook{}
}

func testIdentifiersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIdentifiersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(identifierColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIdentifierToManyIdentities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Identifier
	var b, c Identity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, identityDBTypes, false, identityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, identityDBTypes, false, identityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.IdentifierID = a.ID
	c.IdentifierID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Identities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.IdentifierID == b.IdentifierID {
			bFound = true
		}
		if v.IdentifierID == c.IdentifierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := IdentifierSlice{&a}
	if err = a.L.LoadIdentities(ctx, tx, false, (*[]*Identifier)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Identities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Identities = nil
	if err = a.L.LoadIdentities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Identities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testIdentifierToManyAddOpIdentities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Identifier
	var b, c, d, e Identity

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, identifierDBTypes, false, strmangle.SetComplement(identifierPrimaryKeyColumns, identifierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Identity{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, identityDBTypes, false, strmangle.SetComplement(identityPrimaryKeyColumns, identityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Identity{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddIdentities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.IdentifierID {
			t.Error("foreign key was wrong value", a.ID, first.IdentifierID)
		}
		if a.ID != second.IdentifierID {
			t.Error("foreign key was wrong value", a.ID, second.IdentifierID)
		}

		if first.R.Identifier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Identifier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Identities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Identities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Identities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testIdentifiersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIdentifiersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IdentifierSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIdentifiersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Identifiers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	identifierDBTypes = map[string]string{`ID`: `uuid`, `Kind`: `character varying`, `Value`: `character varying`}
	_                 = bytes.MinRead
)

func testIdentifiersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(identifierPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(identifierAllColumns) == len(identifierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIdentifiersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(identifierAllColumns) == len(identifierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Identifier{}
	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, identifierDBTypes, true, identifierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(identifierAllColumns, identifierPrimaryKeyColumns) {
		fields = identifierAllColumns
	} else {
		fields = strmangle.SetComplement(
			identifierAllColumns,
			identifierPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IdentifierSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIdentifiersUpsert(t *testing.T) {
	t.Parallel()

	if len(identifierAllColumns) == len(identifierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Identifier{}
	if err = randomize.Struct(seed, &o, identifierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Identifier: %s", err)
	}

	count, err := Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, identifierDBTypes, false, identifierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Identifier struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Identifier: %s", err)
	}

	count, err = Identifiers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
