apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "api.fullname" . }}
  labels:
    app: {{ template "api.name" . }}
    chart: {{ template "api.chart" . }}
    env: {{ required "env is required" .Values.env }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "api.name" . }}
      release: {{ .Release.Name }}
      env: {{ required "env is required" .Values.env }}
  template:
    metadata:
      labels:
        app: {{ template "api.name" . }}
        release: {{ .Release.Name }}
        env: {{ required "env is required" .Values.env }}
      annotations:
        ad.datadoghq.com/api.logs: '[{"source":"golang","service":"api"}]'
        tier: backend
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ required "image.tag is required" .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DSN_SSO
              valueFrom:
                secretKeyRef:
                  name: {{ template "api.name" . }}
                  key: dsn_sso
            - name: DSN_BOX
              valueFrom:
                secretKeyRef:
                  name: {{ template "api.name" . }}
                  key: dsn_box
            - name: AWS_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "api.name" . }}
                  key: aws_access_key
            - name: AWS_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "api.name" . }}
                  key: aws_secret_key
            - name: ENV
              value: {{ required "env is required" .Values.env }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/api-config.toml
              subPath: api-config.toml
              name: config
          livenessProbe:
            httpGet:
              path: /version
              port: http
          readinessProbe:
            httpGet:
              path: /version
              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: config
          configMap:
            name: {{ template "api.fullname" . }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
# 